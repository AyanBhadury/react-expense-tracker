{"version":3,"sources":["components/Header.js","context/AppReducer.js","context/GlobalState.js","components/IncomeExpenses.js","components/Balance.js","components/Transactions.js","components/TransactionLists.js","components/AddTransaction.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","action","type","transactions","filter","transaction","id","payload","initialState","text","amount","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","deleteTransaction","addTransaction","IncomeExpenses","useContext","map","total_income","item","reduce","acc","current","total_expense","className","Math","abs","Balance","total","accumulator","Transactions","sign","onClick","TransactionLists","key","AddTransaction","useState","setText","setAmount","onSubmit","e","preventDefault","newTransaction","Date","now","htmlFor","onChange","target","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fe76613b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Header() {\r\n    return (\r\n        <div>\r\n            <h1>Expense Tracker</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","export default (state, action) => {\r\n    //console.log(state)\r\n    switch (action.type) {\r\n\r\n        case 'DELETE_TRANSACTION':\r\n            return {\r\n                ...state,\r\n                transactions: state.transactions.filter(transaction => transaction.id !== action.payload)\r\n            }\r\n\r\n        case 'ADD_TRANSACTION':\r\n\r\n            return {\r\n                ...state,\r\n                transactions: [action.payload, ...state.transactions]\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { createContext, useReducer } from 'react'\r\nimport AppReducer from './AppReducer';\r\nconst initialState = {\r\n    transactions: [\r\n        { id: 1, text: 'Flower', amount: -20 },\r\n        { id: 2, text: 'Salary', amount: 300 },\r\n        { id: 3, text: 'Book', amount: -10 },\r\n        { id: 4, text: 'Camera', amount: 150 }\r\n    ]\r\n}\r\n\r\n// Create context\r\nexport const GlobalContext = createContext(initialState);\r\n\r\n// Provider\r\n\r\nexport const GlobalProvider = ({ children }) => {\r\n    const [state, dispatch] = useReducer(AppReducer, initialState);\r\n    // console.log(state);\r\n\r\n    // Actions\r\n    function deleteTransaction(id) {\r\n        dispatch({\r\n            type: 'DELETE_TRANSACTION',\r\n            payload: id\r\n        });\r\n    }\r\n\r\n    function addTransaction(transaction) {\r\n        dispatch({\r\n            type: 'ADD_TRANSACTION',\r\n            payload: transaction\r\n        });\r\n    }\r\n\r\n    return (<GlobalContext.Provider value={{\r\n        transactions: state.transactions,\r\n        deleteTransaction,\r\n        addTransaction\r\n    }}>\r\n        {children}\r\n    </GlobalContext.Provider>);\r\n}","import React, {useContext} from 'react'\r\nimport {GlobalContext} from '../context/GlobalState'\r\n\r\nfunction IncomeExpenses() {\r\n\r\n    const {transactions} = useContext(GlobalContext)\r\n\r\n    const amount =  transactions.map (transaction=>transaction.amount);\r\n\r\n    const total_income = amount.filter(item => item > 0).reduce((acc,current)=>{\r\n        return acc+current;\r\n    },0);\r\n\r\n    const total_expense = amount.filter(item => item < 0).reduce((acc,current)=>{\r\n        return acc+current;\r\n    },0);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"inc-exp-container\">\r\n                <div>\r\n                    <h4>Income</h4>\r\n                    <p className=\"money plus\">+₹{total_income}</p>\r\n                </div>\r\n                <div>\r\n                    <h4>Expense</h4>\r\n                    <p className=\"money minus\">-₹{Math.abs(total_expense)}</p>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default IncomeExpenses\r\n","import React, {useContext} from 'react'\r\nimport {GlobalContext} from '../context/GlobalState'\r\n\r\n\r\n\r\nfunction Balance() {\r\n    const {transactions} = useContext(GlobalContext)\r\n   // console.log(transactions);\r\n\r\n    const amount = transactions.map ((transaction)=>{\r\n        return transaction.amount;\r\n    })\r\n\r\n    const total = amount.reduce ((accumulator,current)=>{\r\n                return accumulator + current;\r\n    },0)\r\n\r\n\r\n    return (\r\n        <>\r\n            <h4>Your Balance</h4>\r\n            <h1>₹{total}</h1>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Balance\r\n","\r\nimport React, { useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nexport const Transactions = ({ transaction }) => {\r\n    const { deleteTransaction } = useContext(GlobalContext);\r\n\r\n    const sign = transaction.amount < 0 ? '-' : '+';\r\n\r\n    return (\r\n        <li className={transaction.amount < 0 ? 'minus' : 'plus'}>\r\n            {transaction.text} <span>{sign}₹{Math.abs(transaction.amount)}</span><button onClick={() => deleteTransaction(transaction.id)} className=\"delete-btn\">x</button>\r\n        </li>\r\n    )\r\n}","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\nimport {Transactions} from './Transactions';\r\n\r\nfunction TransactionLists() {\r\n\r\n    const { transactions } = useContext(GlobalContext);\r\n\r\n    return (\r\n        <>\r\n            <h3>History</h3>\r\n            <ul className=\"list\">\r\n\r\n                {\r\n                    transactions.map((transaction) => {\r\n                        return <Transactions key = {transaction.id} transaction={transaction} />\r\n                    })\r\n                }\r\n\r\n            </ul>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TransactionLists\r\n","import React, { useState, useContext } from 'react'\r\nimport { GlobalContext } from '../context/GlobalState';\r\nfunction AddTransaction() {\r\n\r\n    const [text, setText] = useState('');\r\n    const [amount, setAmount] = useState(0);\r\n    const { addTransaction } = useContext(GlobalContext);\r\n\r\n   // console.log(addTransaction);\r\n\r\n    const submitHandler = (e) => {\r\n\r\n        e.preventDefault();\r\n        \r\n\r\n        const newTransaction = {\r\n            id: Date.now(),\r\n            text,\r\n            amount: +amount\r\n        }\r\n        //console.log(newTransaction)\r\n        addTransaction(newTransaction);\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h3>Add new transaction</h3>\r\n            <form onSubmit={submitHandler}>\r\n                <div className=\"form-control\">\r\n                    <label htmlFor=\"text\">Text</label>\r\n                    <input type=\"text\" value={text} onChange={(e) => { setText(e.target.value) }} placeholder=\"Enter text...\" />\r\n                </div>\r\n                <div className=\"form-control\">\r\n                    <label htmlFor=\"amount\"\r\n                    >Amount <br />\r\n            (negative - expense, positive - income)</label\r\n                    >\r\n                    <input type=\"number\" value={amount} onChange={(e) => { setAmount(e.target.value) }} placeholder=\"Enter amount...\" />\r\n                </div>\r\n                <button className=\"btn\">Add transaction</button>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddTransaction\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport IncomeExpenses from './components/IncomeExpenses';\r\nimport Balance from './components/Balance';\r\nimport TransactionLists from './components/TransactionLists';\r\nimport AddTransaction from './components/AddTransaction';\r\n\r\nimport { GlobalProvider } from './context/GlobalState';\r\n\r\nfunction App() {\r\n  return (\r\n    <GlobalProvider>\r\n      < Header />\r\n      <div className=\"container\">\r\n        <Balance />\r\n        <IncomeExpenses />\r\n        <TransactionLists />\r\n        <AddTransaction />\r\n      </div>\r\n    </GlobalProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}